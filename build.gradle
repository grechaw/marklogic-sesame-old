buildscript {
    repositories {
        mavenCentral()
        jcenter()

        maven {url "http://developer.marklogic.com/maven2/"}
        maven {url "http://rjrudin.github.io/marklogic-java/releases"}
    }
    dependencies {
        classpath "com.marklogic:ml-gradle:2.0a12b"
    }
}

plugins {
    id 'me.champeau.gradle.jmh' version '0.1.3'
}

apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'ml-gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'

configure(allprojects){
            ext.slf4jVersion = '1.7.2'
            ext.logbackVersion = '1.0.9'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile('org.openrdf.sesame:sesame-repository-api:2.8.3')
    compile('org.openrdf.sesame:sesame-queryresultio-api:2.8.4')
    compile('org.openrdf.sesame:sesame-model:2.8.4')
    compile('org.openrdf.sesame:sesame-queryparser-sparql:2.8.4')
    compile('org.openrdf.sesame:sesame-queryresultio-sparqlxml:2.8.4')
    compile('org.openrdf.sesame:sesame-http-client:2.8.4')
    compile('org.openrdf.sesame:sesame-runtime:2.8.4')

    compile('org.slf4j:slf4j-api:1.7.10')
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

    compile('com.marklogic:java-client-api:4.0-SNAPSHOT')

    testCompile 'com.jayway.restassured:rest-assured:2.4.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
}

sourceSets {
    test {
        java {
            srcDir 'main/test/java'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

task(loadTestData) {
    exec{
        commandLine 'curl --anyauth --user admin:admin -i -X DELETE http://localhost:8200/v1/graphs?graph=my-graph'.tokenize()
    }
    exec {
        commandLine 'curl --anyauth --user admin:admin -i -X DELETE http://localhost:8200/v1/graphs?graph=g27'.tokenize()
    }
    exec {
        commandLine 'curl --anyauth --user admin:admin -i -X POST -H Content-type:application/rdf+xml -d@src/test/resources/setup/test.owl http://localhost:8200/v1/graphs?graph=my-graph'.tokenize()
    }
}

test.dependsOn([loadTestData])
jmh {
    //include = 'some regular expression' // include pattern (regular expression) for benchmarks to be executed
    //exclude = 'some regular expression' // exclude pattern (regular expression) for benchmarks to be executed
    iterations = 5 // Number of measurement iterations to do.
    forceGC = false // Should JMH force GC between iterations?
    //jvmArgs = 'Custom JVM args to use when forking.'
    //jvmArgsAppend = 'Custom JVM args to use when forking (append these)'
    //jvmArgsPrepend = 'Custom JVM args to use when forking (prepend these)'
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
    resultFormat = 'JSON' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
    timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
    warmup = '1s' // Time to spend at each warmup iteration.
    warmupBatchSize = 2 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 1 // Number of warmup iterations to do.
    warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
    warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
}
